Допустим, у нас есть две таблицы: "orders" и "customers".

Таблица "orders" содержит информацию о заказах, включая поле
"customer_id", которое связывает заказы с соответствующими
клиентами в таблице "customers".

Мы можем создать VIEW, чтобы упростить объединение этих
таблиц и получить информацию о заказах с именами клиентов.

Вот пример создания VIEW для упрощения объединения таблиц:
```sql
CREATE VIEW orders_with_customer_info AS
SELECT o.order_id, o.order_date, c.customer_name
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id;
```
В этом примере мы создаем VIEW с именем "orders_with_customer_info".
VIEW будет содержать информацию о заказах, включая идентификатор
заказа, дату заказа и имя клиента. Запрос объединяет таблицы
"orders" и "customers" на основе поля "customer_id" и выбирает
только необходимые столбцы.

Теперь мы можем выполнять запросы к этому VIEW, чтобы получить
информацию о заказах с именами клиентов:
```sql
SELECT * FROM orders_with_customer_info;
```
Этот запрос вернет все записи из VIEW "orders_with_customer_info",
которые объединяют данные из таблиц "orders" и "customers".

Использование VIEW в таком случае позволяет упростить сложное
объединение таблиц и получить удобное логическое представление данных,
которое можно использовать для выполнения запросов и упрощения работы
с данными.