Ограничение FOREIGN KEY (внешний ключ) в базе данных используется
для связи двух таблиц между собой. Оно устанавливает связь
между столбцами одной таблицы (столбцами-родителями) и столбцами
другой таблицы (столбцами-дочерними).

Простыми словами, ограничение FOREIGN KEY позволяет
ссылаться на записи в одной таблице из другой таблицы.

Ограничение FOREIGN KEY работает следующим образом:

1. Указание столбца-родителя: В таблице-дочерней необходимо
указать столбец, который будет ссылаться на столбец-родителя
в другой таблице.

2. Связь с таблицей-родителем: В ограничении FOREIGN KEY
указывается, на какую таблицу и столбец происходит ссылка,
то есть указывается таблица-родитель и столбец-родитель.

3. Проверка целостности данных: При использовании ограничения
FOREIGN KEY, база данных будет проверять существование связанных
записей в таблице-родителе перед выполнением операций в таблице-дочерней.
Например, база данных не позволит удалить запись в таблице-родителе,
если на нее есть ссылки из таблицы-дочерней.

Пример использования ограничения FOREIGN KEY:
Предположим, у нас есть две таблицы: "users" и "orders".
В таблице "users" есть столбец "id" (первичный ключ),
а в таблице "orders" есть столбец "user_id", который ссылается
на столбец "id" в таблице "users". Мы можем установить
ограничение FOREIGN KEY следующим образом:
```sql
CREATE TABLE users (
  id INT PRIMARY KEY,
  name VARCHAR(50)
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  user_id INT,
  order_date DATE,
  FOREIGN KEY (user_id) REFERENCES users(id)
);
```
В этом примере мы указываем, что столбец "user_id" в таблице
"orders" является внешним ключом, ссылается на столбец "id" в
таблице "users". Это означает, что значения в столбце "user_id"
в таблице "orders" должны существовать в столбце "id" в
таблице "users". База данных будет автоматически проверять
целостность данных и не позволит создать запись в таблице "orders",
если значение "user_id" не существует в таблице "users".

Ограничение FOREIGN KEY позволяет связывать данные в разных
таблицах и обеспечивать целостность связанных записей.


Вот пример таблицы с несколькими ограничениями FOREIGN KEY в одной таблице:
```sql
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT,
  employee_id INT,
  product_id INT,
  order_date DATE,
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
  FOREIGN KEY (employee_id) REFERENCES employees(employee_id),
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);
```
В этом примере у нас есть таблица "orders" с несколькими
столбцами и ограничениями FOREIGN KEY, которые связывают
эти столбцы с другими таблицами.

- Столбец "customer_id" ссылается на столбец "customer_id" в таблице "customers".
- Столбец "employee_id" ссылается на столбец "employee_id" в таблице "employees".
- Столбец "product_id" ссылается на столбец "product_id" в таблице "products".

Таким образом, каждое ограничение FOREIGN KEY обеспечивает связь
с соответствующей таблицей и столбцом. База данных будет
автоматически проверять целостность данных и не позволит
создать запись в таблице "orders", если значения в столбцах
"customer_id", "employee_id" и "product_id" не существуют в
соответствующих таблицах "customers", "employees" и "products".
