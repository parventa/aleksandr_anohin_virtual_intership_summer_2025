Понятие PRIMARY KEY (первичный ключ) в базе данных представляет
собой столбец или группу столбцов, которые однозначно идентифицируют
каждую запись в таблице.

Простыми словами, PRIMARY KEY - это уникальный
идентификатор для каждой строки в таблице.

Вот несколько ключевых моментов, которые следует помнить о PRIMARY KEY:

1. Уникальность: Каждое значение первичного ключа в столбце
(или столбцах) должно быть уникальным в пределах таблицы.
Это означает, что нельзя иметь две строки с одинаковыми
значениями первичного ключа.

2. Не может быть NULL: Значения первичного ключа не
могут быть пустыми (NULL). Каждая строка должна иметь
непустое значение в столбце первичного ключа.

3. Идентификация записей: PRIMARY KEY позволяет идентифицировать
каждую запись в таблице. Это полезно для поиска, обновления или
удаления конкретной строки в таблице.

4. Уникальный индекс: По умолчанию, создание PRIMARY KEY
также создает уникальный индекс в таблице, что обеспечивает
быстрый доступ к данным при поиске или сортировке по первичному ключу.

Пример использования PRIMARY KEY:
Предположим, у вас есть таблица "users" со столбцами
"id", "name" и "email". Чтобы сделать столбец "id" первичным ключом,
вы можете использовать следующую команду:
```sql
CREATE TABLE users (
   id INT PRIMARY KEY,
   name VARCHAR(50),
   email VARCHAR(100)
);
```

В этом примере каждая строка в таблице "users" будет иметь
уникальное значение в столбце "id".

Первичный ключ позволяет легко идентифицировать каждого
пользователя в таблице по его уникальному идентификатору.


В SQL есть несколько способов объявления первичного ключа в таблице.
Вот несколько разных вариантов:

1. Одно поле в качестве первичного ключа:
```sql
   CREATE TABLE users (
     id INT PRIMARY KEY,
     name VARCHAR(50),
     email VARCHAR(100)
   );
```
В этом примере поле "id" объявляется как первичный ключ.
Каждое значение в этом столбце должно быть уникальным.

2. Несколько полей в качестве составного первичного ключа:
```sql
   CREATE TABLE orders (
     order_id INT,
     customer_id INT,
     order_date DATE,
     PRIMARY KEY (order_id, customer_id)
   );
```
В этом примере столбцы "order_id" и "customer_id" объявляются
вместе в качестве составного первичного ключа. В команде
PRIMARY KEY указываются все столбцы, составляющие ключ.

3. Автоматическое увеличение значения первичного ключа:
```sql
   CREATE TABLE products (
     id INT AUTO_INCREMENT PRIMARY KEY,
     name VARCHAR(50),
     price DECIMAL(10, 2)
   );
```
В этом примере поле "id" объявляется как первичный ключ
и автоматически увеличивается с каждой новой записью.
Такой подход обычно используется для автоматической
генерации уникальных идентификаторов.

4. Использование CONSTRAINT для объявления первичного ключа:
```sql
   CREATE TABLE employees (
     id INT,
     name VARCHAR(50),
     email VARCHAR(100),
     CONSTRAINT pk_employees PRIMARY KEY (id)
   );
```
В этом примере первичный ключ объявляется с использованием CONSTRAINT.
В качестве идентификатора CONSTRAINT указывается "pk_employees".

Это лишь несколько примеров различных способов объявления
первичного ключа в таблице. Выбор конкретного способа зависит
от требований вашей базы данных и предпочтений разработчика.